[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import reactive, render, req\nimport shinyswatch\n\n# Theme\nshinyswatch.theme.darkly()\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# names the page\nui.page_opts(title=\"Penguins Data - Anjana\", fillable=True)\n\n# creates sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    # Creates a dropdown input to choose a column \n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    ui.input_selectize(\n        \"selected_gender\",\n       \"Select Sex\",\n        [\"male\", \"female\"],\n    )\n\n    # Creates a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Number of Plotly bins\", 30)\n    \n    # Creates a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn bins\", 1, 40, 20)\n\n    # Adds a horizontal rule to the sidebar\n    ui.hr()\n    \n    # Creates a checkbox group input\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n\n    # Creates a checkbox group input for islands\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Islands\",\n        penguins_df[\"island\"].unique().tolist(),\n        selected=penguins_df[\"island\"].unique().tolist(),\n        inline=True,\n    )\n\n  # Adds a hyperlink to GitHub Repo\n    ui.a(\n        \"Anjana's GitHub\",\n         href=\"https://github.com/anjana-codes/cintel-02-data\",\n         target=\"_blank\",\n         )\n\n# Creates a DataTable showing all data\n\nwith ui.layout_columns():        \n    with ui.card(full_screen=True):\n        ui.h2(\"Penguins DataTable\")\n        \n\n        @render.data_frame\n        def render_penguins_table():\n            return render.DataTable(filtered_data())\n\n# Creates a DataGrid showing all data      \n    with ui.card(full_screen=True):\n        ui.h2(\"Penguins DataGrid\")\n\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data()) \n\n# Creates a Plotly Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram: Species\")\n    \n        @render_plotly\n        def plotly_histogram():\n          return px.histogram(\n          filtered_data(), \n          x=input.selected_attribute(), \n          nbins=input.plotly_bin_count(),\n          color=\"species\",\n                            color_discrete_map={\n                     'Adelie': 'yellow',\n                     'Chinstrap': 'brown',\n                     'Gentoo': 'green'} \n\n                \n        \n          )     \n\n# Creates a Seaborn Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram: Species\")\n        @render.plot(alt=\"Species Seaborn Histogram\")\n        def seaborn_histogram():\n            seaborn_plot = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n                multiple=\"dodge\",\n                hue=\"species\",\n                 palette={\n                     'Adelie': 'yellow',\n                     'Chinstrap': 'brown',\n                     'Gentoo': 'green'},\n            )\n            return seaborn_plot\n\n# Creates a Plotly Scatterplot showing all species and islands\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                title=\"Plotly Scatterplot\",\n                  x=\"body_mass_g\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                color_discrete_map={\n                     'Adelie': 'yellow',\n                     'Chinstrap': 'brown',\n                     'Gentoo': 'green'},\n              \n            )\n\nwith ui.card(full_screen=True):\n        ui.h2(\"Seaborn Barplot: Island\")\n\n        @render.plot(alt=\"Island Penguins\")\n        def seaborn_barplot():\n            seaborn_barplot = sns.barplot(\n                data=filtered_data(),\n                x='island',\n                y='body_mass_g',\n                hue='species',\n                 palette={\n                     'Adelie': 'yellow',\n                     'Chinstrap': 'brown',\n                     'Gentoo': 'green'},\n            )\n            return seaborn_barplot\n        \n#--------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# Reactive calculation to filter data based on selected species and islands\n@reactive.calc\ndef filtered_data():\n    return penguins_df[\n        (penguins_df[\"species\"].isin(input.selected_species_list())) &\n        (penguins_df[\"island\"].isin(input.selected_island_list()))\n    ]\n", "type": "text"}, {"name": "favicon-32x32.png", "content": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAADFRJREFUWEc1l3mUFfWVxz+/Wt7+Xu97Q9PdNC07dlgalVUQhQRHScBllGRwmOgwBpk4xygexwWVMY6Tc0adGHVEHUGEiCEBZZEgCEKzIzSCvdAL9N6vu99Wr7Y5VW3+qFfvV/Vbbp1773cRJ79ttS0LbGEjCYEAsJ2xhW3b2MNPsN1n7iv3v/jb3OHp7q+EoKf3Ogc+f49o/3V3v9raRUysWTS8xp0Hlg3OmUKAqDvX6q4XEkjCorezmcuX6jAtk6G+LqbPvovs/DL3EGcD64cAnNXO2Lmcd5K7teD0mUOc+HoHupZASBI+v5efLV9HKFIwHKZlY9k2skjQcKUOceKHAGTJ5vDBrVw6X0c6nWT8mDxa2ttJaCFWrdmI6vWhpzWuNp/nWnsTWZk5lFdOIhzJwdATKIoXC4Xt296go6Uey0ojZIGqyEyZNJuZs/6OaM91+vu7qBo9Gkky+eOOzYiTpy7arVfraW25SF9vBwsX1vDR5u3EYjqGYZCZO4oHVj5GS9N5jh4/TOvVK+6XKLKgtGQEIwptTp5twevxM3bMFHqiUfoGejGMFLZtIUuCQCBM0OcnMdTLwkX3M3pMNcI2+OLLfYhVP19qp1MJhAyFeREq8ju42iHT1qtimhY5WTmESdMWjaEEM1m8dDmnTp2g6fIFykfmM2dKlM1/6UL25DJ1xmJA57vLZ0nGYwghI8uKe5hp6kgYrFi+huLSkUQHutj1+Q7EynsX2haGUwBIkuTm3qkYy7IwDHM4t4qX7Mwc7r57Pme+beXQV1/j84eRVQ+yojC+XDB1+o+43CzjVVPk5lcQT5q0tlylv6+TZHwACxlLT1NdOYJp02s5eOQbtKSG+If757lFaEmSW4mWZSLMGClDxjAtTMMkr7CSRbfdRnSwl00fbEVRPGTnFLi59/u9zL6phm+OHGThzDTTb7mVS81hvvrrUSZPnkRBYSXxpMG5b8/T09Xl1kk6NYRHlZh9yxzEQw8MByCcwyWFuTdXMK2yjkNH4xypD5GbF6Jm+lxkpZwPP95GQ2MjquojIyObgoICDK2PaF8bPtlg5YwU+aM8UDCV3JxcPJ48kAuw8WHYKp98+lcG49AX7UNPDYLzsU4ATr8Pd5FKadkoRhYJzpw6xdKf3ERJaQTNymEwXcmzL7yOkGQ3Pb09XWRnZ6IbcdCH8HtkPKqgJN/PP91bCOk4wfxp4K3Asn1Y+Nmx+wjJtJf2a22ktRhGchBx/09rbcOwMSxIGza6JaN6wvT3d/KLv7+T2hlV6KbAJI8Ptu7jo48+dgEK28Lr8+ELqHgVg6ygyujKKqZPG0d1UZT84kokXwk2AWxkwMe+w+dobe8l2t+FlhokMdCDWDB/sj0Q00lolpsrJB9er59UKsWk6jxeem4Npu3HsgMkdIVVv3yM5oYGF8UiOQX4fSpmrJtb58xk9ZonMfVuwt5BVI8fITzYtoplCyxLsOdQHRcvNjEQbUeRBImhKOLG2ml2Z1c/6bSGoRnIvgiZOQVuxWqJXl7/7RNUVlZi2TKaYbPh1bf4YvcXSLJKedUNJOKD5AmNu+67l4W3L8HQegl4YihKECGcwyUs06KprYNtn+1HN0z6upsIh0JoiSFExdjx9sDgELqmYegW/ox8MnPyUGWFcDhIhtfkP158CiHZ6IbGX/Ye5cUXXyOcmcWIUZUkEwlUofObdf/MDePGY2hRPHIMVQ04/etyQP9ggv96811kJUQqPkRsqIuA34uChaiaOMnu6eknGU9i2xLBjBxsIREIBCgpKSMWvc7br79MMBggrce4eKWZR9asJyc/3+2ceDxG5ahSXn9tI5YQ6Focj+hHVYJIkoppwe4vv+ZY3Xk32GQyiiRMFyHDAR/i4XVP2v/3wSb0tI7iDeLzhYgP9aPrafzhTAqyQ2x5//d4PCqJVD/tXT2sWv0E2bkF9PZ2IysqxQU5vPW7V7AklbSewi/1oioBZNnhB8Eb727h2rVOon0djJ8wluPHj5IZziQ7IwOx+tF19sdbNmMa4A1GkCWZ/u7rLrk6VLxk8QKef/pJF6DiqQFa2lpZs/ZZSsvK6enuIjY0iM/r5Yl1DzOt9mZMw8ArupFlFUXxg6Tw5v9+wvcNTdTcUMr0m+bywkvPk52ZSUYkgrhx5ky7saHJDSCSVYisyHS0XMFy+NmWyMrOYOe2j1G9Mpo2xP6vjvDyi7+jpvYmTNPgu/qLLsHfOreWR9euw9lIWN3IEm4hyrKHA8fO8P77H/KbX60mp7CMJ9Y/SSQUIuBVERXjxtrRvgEsSyYzp5hgKMBAXxcd11qH+11IPPfMehbcNp9kcpD/fvMddmz9lBlzFqDpOvGBXq42NVMxqoQXNmwgoJr097VQkJ+N1xNBVn3Ykoc//XkXt8+fh2YrPPnMU4QDYRRhIsZMHG/39Q5iWhI5uU4AIUzLJjnUw9XGBmxJ5p4VP+PhRx5CSyf45epHabxyhSm1s1ys+MXKFVw4X8+Hm95j0eJFLF92F5FwgIA36eKJ1xtGVnxIsuJiQXdfjOc2PE1GJAtDiyFGjK60Y0MJN+dZ2SUEg2F0U0dPDtLSeBlkhbVr1/LjpXcgo/Mvv/o150+fZcykGlRV5d/+dQ2xhMGuP+9k7oKFWMlBFixcQnfHBWx9iEAoC9UznApHN7V09PHaf77scsXAQB8ir2SE7YCQJPmIZOYSCARJaynyciOcPPYNyDLvvP0HiksKUBL7eGz9Fs6ea6X2ltn8qGYCNTPmsXfPXmSHTW2DqVPGMWfe7cRjPQx0X3DFiD+QhdcbcoEpoRnsP/Al9fX19HR3InKLSmyn5VRvFjm5+SiKQk9XO9VjKjh6+GvGTZzEK6++Ql3dMTY+v344PZrJs888xaIly/hk5z7OnzqBZWgEA35qpkxg6Z13u2KxpfEYQZ9KIJRBKFiAaUukDYN4PMnWbdv57tIZRFZBka3rBqo3QkFRsRuAYqcJ+D00fN/Aho0vU1RUyLvvvM2n27e7EtQBoJmz5/LImsc5fOQbWhuvYBoaXp+Xwvw8Ft9xB2XlFVxvr8cjkq548fvzMR3dYVpoWppNH31E/YUTiMz8IltLpZFkn6tg71txN3f+eDFt19rJys3D6wvS3NJCS2s7PV09XDhdR13dcZbd93NGVU3gWlsriViURDzmYoAiSyxZspjy6onEB64ha61kZuUTDBWBrLqdNZRI8cYbr9NxrRmRW1xup5IJt0AefOB+1jz8j65mN0yTWDJJc1sbn3/xOadPniad0hhZMZpzJ4+xcvVaTpw+i2SbeBSJeCzm1o6jrm+4oZqfLltGMCOTC8e3k52dQWlZDR5PANOGlrbrbHrvLQYHnSIsrbB1LeUeOmvWHJ7/9/WuNkmbFkOpJGfOnubc2fNEezv5/splLl+6zITJU5l203xOnDiBKglCkRDJRMwVorIQRCI+lt/zAGVVU2g8u4No51mmz7qHYDgbSSg0t3eyZfMmeno6EIUjq9wuMHQd1Rvg1VdeonpMJbpjTOJJ9uzdQyScwaGDX1FWWkIgFGFy7Tyam6+yf/cuTMvC6/e5bDnQ0+0WY2F+Jg+ufIiy8kmkkr3s+uNvyc0KMn/RCmTVz4XvmvnTZ5/R19eLyC+ptHVdH7ZcksTNM6bx+ONrMa0U/dF+tm7dTjJlUDHmRhYvudPlB0kSnL9wji2bfk86bSHLEv6An/bWFhTZpqqyjFWrf40nmOPS8YHP3+HUkT08vX4tij+bvV/WcfjQYRKptBNAue0QkKwIUlraxfcFty1i6U8W4fEIdu7cyWeffkFaN3h64/9QNnqsW0jp1ACb//AK506fJhQOE48NYRg6hYX5zLrlFuYsfpDm1hbamxtovnyc9pZG5s+eQnX1BEzvKK53dLJ/93bEo48/bReVjkSSZTfPDVcu4/cHKSwuoLi0mGh/L03ff08gI4uikgpKRla5dsuybNoaL3Ls6EFMXXe9hBOIQ15TaqYjKx6aGy6iqh5XW3R1Xcfn9ZObW4CshlzE9cgCcfT4t7aj/w3TcEWCYVgubjvGMpXWMG0bj6q6GlCSPZim45hxi004bC+EK2CE7eCD83zYsDrvnP0cGncsrQNgiizjUVQX9p00ulbk6sEDdrq4iiHDdBWLZZoEgiFs1zsPW2nHHTnW3LXtzuVs/4OSd+7OWPzNfjuW3hm4Un/47i61HLvv+Hsb0ZemtWuQvMps/h9Gc8uK7j3ufAAAAABJRU5ErkJggg==", "type": "binary"}]